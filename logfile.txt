logfile.txt

2020 08 06 Thu

- Create repository "https://github.com/RochSchanen/DetectionSynchrone"
- add notes.txt and logfile.txt
- add test files for Alchitry Cu device.
- these files compile with IceCube2 software provided by lattice.
- The programmer used can be the AlchitryCu loader or the IceStorm loader.

IceCube2 configuration for the Alchitry Board
    - Device familly "iCE40"
    - Device "HX8K"
    - Device Package "CB132"
    - IOBank Voltage "3.3" volts for all banks
    - add files:
        latticeBlink.vhd : VHDL language version
        latticeBlink.pcf : pins constraints
        latticeBlink.sdc : timer constraints
    - note: works alternatively with the Verilog language version too: "latticeBlink.v".
    - All files are generated in the "latticeBlink" sub folder (not in repository).
    - The binary file "latticeBlink_bitmap.bin" is found in the "latticeBlink/latticeBlink_Implmnt/sbt/outputs/bitmap" folder.

- add "latticeBlink_bitmap.bin" to the repo to check the programmers when debugging.
- programming checked:

    >iceprog latticeBlink_bitmap.bin 
    init..
    cdone: high
    reset..
    cdone: low
    flash ID: 0xEF 0x40 0x16 0x00
    file size: 135179
    erase 64kB sector at 0x000000..
    erase 64kB sector at 0x010000..
    erase 64kB sector at 0x020000..
    programming..
    reading..
    VERIFY OK
    cdone: high
    Bye.

- led0 blinks at typical frequency of 100MHZ/2^26 ~ 1HZ.
- add files:
    AlchitryCu_UART.pcf
    AlchitryCu_UART.sdc
    AlchitryCu_UART.vhd
    AlchitryCu_UART.py
- compile and program:
    AlchitryCu_UART_bitmap.bin
- add "AlchitryCu_UART_bitmap.bin" to the project for later tests
- when "AlchitryCu_UART_bitmap.bin" is loaded to the device,
run the python test program "AlchitryCu_UART.py" to check the echo
response of the device through UART port B ("ttyUSB1")
- note: "ttyUSB0" is used by the programmer to store the binary file
in the eprom that configures the FPGA (AlchitryCu specific):

    >./AlchitryCu_UART.py

    |hello 1
    |
    |hello 2
    |
    |hello 3
    |
    |hello 4
    |

- So far, so good.

2020 08 09 Sun

- write UART receiver architecture
- data echoed properly but leds shows the same value independently from the character send: value is 8+2 = 10. So the transmission is at least partially working. The outcome depends on the transmission frequency if the UART clock is slowed down to half the frequency.

2020 08 10 Mon

- Solder pins to the Alchitry Br to connect the agilent digital signals cable to monitor up to 16 channels at high-speed (2Gbit/s).
- 100 MHz Clock, UART Tx, UART Rx, one Gnd, and eight single ended I/O pins are now accessible for measurements an testing. more will probably be required.
- Correct the transmission issue which causes the leds to show permanently the integer 10 by preventing the serial port from sending the terminal string Carriage return (CR=13) followed by a line-feed (LF=10).
- the UART receive VHDL code works (Add data valid later).
- add binary string to the python script command line for testing.
- converts files tabs to spaces

2020 08 12 Wed

- upgrade AlchitryCu_UART.py script:
    - automatic detection of the UART port.
    - use fist argument of the command line parameter as the value to send to the port in binary format. The result is displayed on the Alchitry LEDs.
    - The transmission rate is as fast as 781250 bits/s (could be higher)
    - However, when several bytes are sent, they are not separated by a constant period of time (check the order of magnitude).

2020 08 14 Fri

- Add accumulator.vhd which contains the "integrator" component design.
- create AlchitryCu.vhd which defines "AlchitryCu" top entity of the project.
- add more entries to the pin definitions file "AlchitryCu.pcf"
- add comments in the constraint file "Alchitry.sdc"
- compile and load: check oscilloscope signals for counter increments of 3, 2 and 1. The periods obtained for the most significant bit are 850ns, 1280ns and 2560ns, corresponding respectively to the frequencies (300/256)MHZ, (200/256)MHz, (100/256)MHz as expected.
- re-organise folders.

2020 08 15 Sat

- split accumulator.vhd in components part: addsync.vhd, fifobuf.vhd, placc.vhd
- add simulated rom component srom.vhd, a file maker MakeSinBusLengthxBits.py for creating rom memory files, a test memory file SIN256x8.txt.
- create library folder to contain the component files.
- create test bench and benches folder
- new library tested using bench
- new library synthesised and run using icecube2 and uploaded to the Alchitry Cu.
- see picture "IMG_20200815_123831.jpg"

2020 08 18

- work on the pin constraint file.
- found that the buttons and switches are configured with pull-up resistors.
- the ice40hx8k-cb132 can be configured with internal pull-up resistors only.
- so, you cannot link directly a pin to digital logic. You have to configure the pins as in/out ports, discharge any stray capacitors applying a low output voltage, and then readout the input value at the port immediately after.

2020 08 21

- work on the ICE40_HX8K_CB132 primitives library.
- import primitives library using:
    library sb_ice40_components_syn;
    use sb_ice40_components_syn.components.all;
- check SB_DFF: simple D flip-flop, OK.
- check SB_IO: simple output pin configuration pin, OK.
- add small doit script for loading last binary produced by icecube2

2020 08 22

- generate digital wave form of 16 bits length at frequency 100/16 MHz: OK.

2020 08 23

- create refresher signals: OK.
- modify refresher using SB_LUT4 primitive : OK.
- add SB_IO primitive to allow for capacitance discharging through temporary pull-down the io port by applying a low level output signal then disable output and read input value: OK.

- todo: adjust time constraints file for derived clocks to remove warnings.
